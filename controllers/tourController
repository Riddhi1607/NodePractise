const fs = require('fs')
const Tour = require('./../models/tourModel')

const tours = JSON.parse(fs.readFileSync(`${__dirname}/../dev-data/tours-simple.json`))

// exports.checkBody = (req, res, next) => {
//     if (!req.body.name || !req.body.price) {
//         return res.status(400).json({
//             status: 'Bad Request',
//             message:'you must provide name and price when creating a tour'
//         });
//     }
//     next();
// }

exports.getAllTours = async (req, res) => {
    try {
        const foundTours = await Tour.find();
        res.status(200).json({
            status: 'success',
            requestedAt: req.requestedAt,
            count: foundTours.length,
            data: {
                tours: foundTours
            }
        })
    }
    catch (ex) {
        res.status(500).json({
            status: 'failure',
            requestedAt: req.requestedAt,
            message: 'error while getting the tours',
            data: null
        })
    }



};

exports.getTourById = async (req, res) => {
    try {
        const id = req.params.id;
        const foundTour = await Tour.findById(id); // this is the short hand for the below one offered by Moongse
        //const foundTour = await Tour.findOne({ _id: id });
        res.status(200).json({
            status: 'success',
            requestedAt: req.requestedAt,
            data: {
                tour: foundTour
            }
        })
    }
    catch (ex) {
        res.status(500).json({
            status: 'failure',
            message: ex
        })
    }

};

exports.createTour = async (req, res) => {
    try {
        const newTour = await Tour.create(req.body);
        res.status(201).json({
            status: 'success',
            requestedAt: req.requestedAt,
            data: {
                tour: newTour
            }
        })
    }
    catch (err) {
        res.status(400).json({
            status: 'failed',
            message: err
        })
    }

};

exports.patchTour = async (req, res) => {
    try {
        const tourObj = await Tour.findByIdAndUpdate(req.params.id, req.body, {
            new: true,
            runValidators: true
        });
        res.status(200).json({
            status: 'success',
            requestedAt: req.requestedAt,
            data: {
                tour: tourObj
            }
        });
    }
    catch (ex) {
        res.status(500).json({
            status: 'failure',
            requestedAt: req.requestedAt,
            message: ex
        })
    }    
};

exports.deleteTour = async (req, res) => {
    try{
        await Tour.findByIdAndDelete(req.params.id);
        return res.status(204).json({
            status: 'success',
            data : null
        });   
    }
    catch(err){
        return res.status(500).json({
            status: 'failure',
            message: err
        });
    }       
};

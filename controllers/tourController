const fs = require('fs')

const tours = JSON.parse(fs.readFileSync(`${__dirname}/../dev-data/tours-simple.json`))

exports.checkId = (req, res, next, val) => {
    console.log(`Tour Id is ${val}`);
    reqParamId = val * 1;
    const tour = tours.find(el => el.id === reqParamId);

    if (!tour) {
        return res.status(404).json({
            status: 'not found',
            message: 'Invalid Id passed in the request uri'
        })
    };

    next();
}

exports.checkBody = (req, res, next) => {
    if (!req.body.name || !req.body.price) {
        return res.status(400).json({
            status: 'Bad Request',
            message:'you must provide name and price when creating a tour'
        });
    }
    next();
}

exports.getAllTours = (req, res) => {
    res.status(200).json({
        status: 'success',
        requestedAt: req.requestedAt,
        count: tours.length,
        data: {
            tours: tours
        }
    })
};

exports.getTourById = (req, res) => {
    const tour = tours.find(el => el.id === reqParamId);

    console.log(req.params);

    res.status(200).json({
        status: 'success',
        requestedAt: req.requestedAt,
        data: {
            tour
        }
    })
};

exports.createTour = (req, res) => {
    const newId = tours[tours.length - 1].id + 1;
    const newTour = Object.assign({ id: newId }, req.body);
    
    console.log(newTour);
    
    tours.push(newTour);

    fs.writeFile(`${__dirname}/../dev-data/tours-simple.json`, JSON.stringify(tours), (err) => {
        console.log(err)
        if (!err) {
            res.status(201).json({
                status: 'success',
                requestedAt: req.requestedAt,
                data: {
                    tour: newTour
                }
            })
        }
        else{
            res.status(400).json({
                status: 'failed',
                message: err
            })
        }
    })
};

exports.patchTour = (req, res) => {
    console.log(req.params);
    reqParamId = req.params.id * 1;

    const tour = tours.find(el => el.id === reqParamId);

    if (!tour) {
        return res.status(404).json({
            status: 'not found'
        })
    };
    res.status(200).json({
        status: 'success',
        data: {
            tour: '<updated tour here>..'
        }
    })
};

exports.deleteTour = (req, res) => {
    console.log(req.params);
    reqParamId = req.params.id * 1;

    const tour = tours.find(el => el.id === reqParamId);

    if (!tour) {
        return res.status(404).json({
            status: 'not found',
            message: 'Invalid Id'
        })
    };
    res.status(200).json({
        status: 'success',
        data: null
    })
};
